{"version":3,"sources":["AdminComponents/academics/notes/NoteForm.js","AdminComponents/academics/notes/AddNote.js"],"names":["NoteForm","props","register","handleSubmit","errors","useForm","classes","setclasses","useState","courses","setcourses","useEffect","axios","get","then","res","console","log","data","classID","setclass","subject","setsubject","topic","settopic","loading","handleAdd","handleReset","isEdit","role","setfile","notes","setnotes","_jsxs","className","action","children","_Fragment","_jsx","value","onChange","e","target","name","selected","hidden","length","map","classCode","disabled","code","ref","required","type","rows","id","accept","file","onClick","AddNote","setclassID","user","useSelector","selectUser","setloading","handleResetNote","AddForm","async","files","size","errorAlert","fileReader","FileReader","readAsDataURL","onloadend","result","post","dataUrl","error","path","url","courseID","senderID","response","successAlert","catch","err"],"mappings":"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","file":"static/js/161.0a974774.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport axios from \"../../../store/axios\";\n\nfunction NoteForm(props) {\n  const { register, handleSubmit, errors } = useForm();\n  const [classes, setclasses] = useState([]);\n  const [courses, setcourses] = useState([]);\n\n  useEffect(() => {\n    axios.get(\"/classes\").then((res) => {\n      console.log(res.data);\n      setclasses(res.data);\n    });\n  }, []);\n\n  useEffect(() => {\n    axios.get(\"/courses\").then((res) => {\n      setcourses(res.data);\n    });\n  }, []);\n\n  let {\n    classID,\n    setclass,\n    subject,\n    setsubject,\n    topic,\n    settopic,\n    loading,\n    handleAdd,\n    handleReset,\n    isEdit,\n    role,\n    setfile,\n    notes,\n    setnotes,\n  } = props;\n\n  return (\n    <form className=\"row g-3\" action=\"\">\n      {role === \"admin\" && (\n        <>\n          <div className=\"col-md-6\">\n            <label className=\"form-label\">Select Class</label>\n            <select\n              value={classID}\n              onChange={(e) => setclass(e.target.value)}\n              name=\"class\"\n              className=\"form-select\"\n            >\n              <option selected hidden>\n                Choose...\n              </option>\n              {classes.length > 0 ? (\n                classes.map((e) => (\n                  <option value={e.classCode} key={e.classCode}>\n                    {e.name}\n                  </option>\n                ))\n              ) : (\n                <option disabled>No classes available yet</option>\n              )}\n            </select>\n          </div>\n          <div className=\"col-md-6\">\n            <label className=\"form-label\">Select Subject</label>\n            <select\n              value={subject}\n              onChange={(e) => setsubject(e.target.value)}\n              name=\"class\"\n              className=\"form-select\"\n            >\n              <option selected hidden>\n                Choose...\n              </option>\n              {courses.length > 0 ? (\n                courses.map((e) => (\n                  <option value={e.code} key={e.code}>\n                    {e.name}\n                  </option>\n                ))\n              ) : (\n                <option disabled>No courses available yet</option>\n              )}\n            </select>\n          </div>\n        </>\n      )}\n\n      <div className=\"col-12\">\n        <label className=\"form-label\">Topic</label>\n        <input\n          value={topic}\n          ref={register({ required: true })}\n          onChange={(e) => settopic(e.target.value)}\n          type=\"text\"\n          className=\"form-control\"\n          name=\"topic\"\n        />\n        {errors.topic && (\n          <span className=\" form-error text-danger mb-2\">\n            This field is required\n          </span>\n        )}\n      </div>\n      <div className=\"col-12\">\n        <label className=\"form-label\">Notes</label>\n        <textarea\n          value={notes}\n          onChange={(e) => setnotes(e.target.value)}\n          rows={5}\n          className=\"form-control\"\n          id=\"topic\"\n        ></textarea>\n      </div>\n      <div className=\"col-12\">\n        <label className=\"form-label\">Upload file</label>\n        <input\n          type=\"file\"\n          accept=\".jpg,.jpeg,.png,.doc,.docx,.pdf, .zip\"\n          ref={register({ required: true })}\n          onChange={(e) => setfile(e)}\n          className=\"form-control\"\n          name=\"file\"\n        />\n        {errors.file && (\n          <span className=\" form-error text-danger mb-2\">\n            Please select file\n          </span>\n        )}\n      </div>\n      <div className=\"col-12\">\n        <button\n          onClick={handleSubmit(handleAdd)}\n          className=\"btn blue__btn mr-3\"\n        >\n          {loading && (\n            <span\n              className=\"spinner-border spinner-border-sm\"\n              role=\"status\"\n              aria-hidden=\"true\"\n            ></span>\n          )}\n          {isEdit ? \"Save Changes\" : \"Add\"}\n        </button>\n        <button onClick={handleSubmit(handleReset)} className=\"btn orange__btn\">\n          Reset\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default NoteForm;\n","import React, { useState } from \"react\";\nimport AddForm from \"./NoteForm\";\nimport axios from \"../../../store/axios\";\nimport { errorAlert, successAlert } from \"../../../utils\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../../../store/slices/userSlice\";\n\nfunction AddNote() {\n  const [classID, setclassID] = useState(\"\");\n  const [subject, setsubject] = useState(\"\");\n  const [topic, settopic] = useState(\"\");\n  const [notes, setnotes] = useState(\"\");\n  const [file, setfile] = useState(\"\");\n  const user = useSelector(selectUser);\n  const [loading, setloading] = useState(false);\n\n  const handleAddNote = async () => {\n    if (!classID) {\n      return errorAlert(\"Please select class\");\n    }\n    if (!subject) {\n      return errorAlert(\"Please select course\");\n    }\n    if (!file) {\n      return errorAlert(\"Please select file\");\n    }\n    setloading(true);\n    const data = await axios.post(\"/upload\", { dataUrl: file });\n    if (data.data.error) {\n      return errorAlert(\"The file is too big\");\n    }\n    const path = data.data.url;\n    console.log(path);\n    await axios\n      .post(\"/notes/create\", {\n        topic,\n        classID,\n        courseID: subject,\n        notes,\n        file: path,\n        senderID: user?.id,\n      })\n      .then((response) => {\n        console.log(response.data);\n        if (response.data.error) {\n          errorAlert(response.data.error);\n          setloading(false);\n          return 0;\n        }\n        successAlert(\"notes successfully added\");\n        setloading(false);\n        handleResetNote();\n      })\n\n      .catch((err) => {\n        console.log(err);\n        setloading(false);\n        errorAlert(\"File is too big\");\n      });\n  };\n\n  const handleSetFile = async (e) => {\n    const selected = e.target.files[0]; //await imageCompression(e.target.files[0], options);\n    if (selected?.size > 2000000) {\n      return errorAlert(\"image is too large\");\n    }\n    //setfile(selected);\n    const fileReader = new FileReader();\n    fileReader.readAsDataURL(selected);\n    fileReader.onloadend = () => {\n      setfile(fileReader.result);\n    };\n  };\n  const handleResetNote = () => {\n    setclassID(\"\");\n    setsubject(\"\");\n    settopic(\"\");\n    setnotes(\"\");\n    setfile(\"\");\n  };\n\n  return (\n    <>\n      <div className=\"content__container mb-5\">\n        <h3>Add Notes File</h3>\n        <AddForm\n          classID={classID}\n          setclass={setclassID}\n          subject={subject}\n          setsubject={setsubject}\n          topic={topic}\n          settopic={settopic}\n          file={file}\n          loading={loading}\n          handleReset={handleResetNote}\n          setfile={handleSetFile}\n          role={user?.role}\n          handleAdd={handleAddNote}\n          notes={notes}\n          setnotes={setnotes}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default AddNote;\n"],"sourceRoot":""}