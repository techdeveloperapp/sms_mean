{"version":3,"sources":["AdminComponents/academics/notes/NoteForm.js","AdminComponents/academics/notes/EditNote.js"],"names":["NoteForm","props","register","handleSubmit","errors","useForm","classes","setclasses","useState","courses","setcourses","useEffect","axios","get","then","res","console","log","data","classID","setclass","subject","setsubject","topic","settopic","loading","handleAdd","handleReset","isEdit","role","setfile","notes","setnotes","_jsxs","className","action","children","_Fragment","_jsx","value","onChange","e","target","name","selected","hidden","length","map","classCode","disabled","code","ref","required","type","rows","id","accept","file","onClick","EditNote","setclassID","setloading","useParams","handleResetNote","concat","doc","courseID","EditForm","handleEditNote","FormData","append","post","dataUrl","path","url","put","response","error","errorAlert","successAlert","catch","err","async","files","size","fileReader","FileReader","readAsDataURL","onloadend","result"],"mappings":"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","file":"static/js/162.b6b8c64b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport axios from \"../../../store/axios\";\n\nfunction NoteForm(props) {\n  const { register, handleSubmit, errors } = useForm();\n  const [classes, setclasses] = useState([]);\n  const [courses, setcourses] = useState([]);\n\n  useEffect(() => {\n    axios.get(\"/classes\").then((res) => {\n      console.log(res.data);\n      setclasses(res.data);\n    });\n  }, []);\n\n  useEffect(() => {\n    axios.get(\"/courses\").then((res) => {\n      setcourses(res.data);\n    });\n  }, []);\n\n  let {\n    classID,\n    setclass,\n    subject,\n    setsubject,\n    topic,\n    settopic,\n    loading,\n    handleAdd,\n    handleReset,\n    isEdit,\n    role,\n    setfile,\n    notes,\n    setnotes,\n  } = props;\n\n  return (\n    <form className=\"row g-3\" action=\"\">\n      {role === \"admin\" && (\n        <>\n          <div className=\"col-md-6\">\n            <label className=\"form-label\">Select Class</label>\n            <select\n              value={classID}\n              onChange={(e) => setclass(e.target.value)}\n              name=\"class\"\n              className=\"form-select\"\n            >\n              <option selected hidden>\n                Choose...\n              </option>\n              {classes.length > 0 ? (\n                classes.map((e) => (\n                  <option value={e.classCode} key={e.classCode}>\n                    {e.name}\n                  </option>\n                ))\n              ) : (\n                <option disabled>No classes available yet</option>\n              )}\n            </select>\n          </div>\n          <div className=\"col-md-6\">\n            <label className=\"form-label\">Select Subject</label>\n            <select\n              value={subject}\n              onChange={(e) => setsubject(e.target.value)}\n              name=\"class\"\n              className=\"form-select\"\n            >\n              <option selected hidden>\n                Choose...\n              </option>\n              {courses.length > 0 ? (\n                courses.map((e) => (\n                  <option value={e.code} key={e.code}>\n                    {e.name}\n                  </option>\n                ))\n              ) : (\n                <option disabled>No courses available yet</option>\n              )}\n            </select>\n          </div>\n        </>\n      )}\n\n      <div className=\"col-12\">\n        <label className=\"form-label\">Topic</label>\n        <input\n          value={topic}\n          ref={register({ required: true })}\n          onChange={(e) => settopic(e.target.value)}\n          type=\"text\"\n          className=\"form-control\"\n          name=\"topic\"\n        />\n        {errors.topic && (\n          <span className=\" form-error text-danger mb-2\">\n            This field is required\n          </span>\n        )}\n      </div>\n      <div className=\"col-12\">\n        <label className=\"form-label\">Notes</label>\n        <textarea\n          value={notes}\n          onChange={(e) => setnotes(e.target.value)}\n          rows={5}\n          className=\"form-control\"\n          id=\"topic\"\n        ></textarea>\n      </div>\n      <div className=\"col-12\">\n        <label className=\"form-label\">Upload file</label>\n        <input\n          type=\"file\"\n          accept=\".jpg,.jpeg,.png,.doc,.docx,.pdf, .zip\"\n          ref={register({ required: true })}\n          onChange={(e) => setfile(e)}\n          className=\"form-control\"\n          name=\"file\"\n        />\n        {errors.file && (\n          <span className=\" form-error text-danger mb-2\">\n            Please select file\n          </span>\n        )}\n      </div>\n      <div className=\"col-12\">\n        <button\n          onClick={handleSubmit(handleAdd)}\n          className=\"btn blue__btn mr-3\"\n        >\n          {loading && (\n            <span\n              className=\"spinner-border spinner-border-sm\"\n              role=\"status\"\n              aria-hidden=\"true\"\n            ></span>\n          )}\n          {isEdit ? \"Save Changes\" : \"Add\"}\n        </button>\n        <button onClick={handleSubmit(handleReset)} className=\"btn orange__btn\">\n          Reset\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default NoteForm;\n","import React, { useState, useEffect } from \"react\";\nimport EditForm from \"./NoteForm\";\nimport axios from \"../../../store/axios\";\nimport { useParams } from \"react-router-dom\";\nimport { errorAlert, successAlert } from \"../../../utils\";\n\nfunction EditNote() {\n  const [classID, setclassID] = useState(\"\");\n  const [subject, setsubject] = useState(\"\");\n  const [topic, settopic] = useState(\"\");\n  const [notes, setnotes] = useState(\"\");\n  const [file, setfile] = useState(\"\");\n  const [loading, setloading] = useState(false);\n  const { id } = useParams();\n\n  const handleResetNote = () => {\n    setclassID(\"\");\n    setsubject(\"\");\n    settopic(\"\");\n    setnotes(\"\");\n    setfile(\"\");\n  };\n  useEffect(() => {\n    axios.get(`/notes/${id}`).then((res) => {\n      let data = res.data.doc;\n      setclassID(data?.classID);\n      setsubject(data?.courseID);\n      settopic(data?.topic);\n      setfile(data?.file);\n      setnotes(data?.notes);\n    });\n  }, [id]);\n\n  const handleEditNote = () => {\n    setloading(true);\n    const fileData = new FormData();\n    fileData.append(\"photo\", file);\n    axios\n      .post(\"/upload\", { dataUrl: file })\n      .then((res) => {\n        const path = res.data.url;\n        console.log(path);\n        axios\n          .put(`/notes/update/${id}`, {\n            topic,\n            classID,\n            courseID: subject,\n            notes,\n            file: path,\n          })\n          .then((response) => {\n            console.log(response.data);\n            if (response.data.error) {\n              errorAlert(res.data.error);\n              setloading(false);\n              return 0;\n            }\n            successAlert(\"notes successfully added\");\n            setloading(false);\n            handleResetNote();\n          });\n      })\n      .catch((err) => {\n        setloading(false);\n        errorAlert(\"sorry something went error, try again later\");\n      });\n  };\n\n  const handleSetFile = async (e) => {\n    const selected = e.target.files[0]; //await imageCompression(e.target.files[0], options);\n    if (selected?.size > 2000000) {\n      return errorAlert(\"image is too large\");\n    }\n    //setfile(selected);\n    const fileReader = new FileReader();\n    fileReader.readAsDataURL(selected);\n    fileReader.onloadend = () => {\n      setfile(fileReader.result);\n    };\n  };\n\n  return (\n    <div className=\"content__container mb-5\">\n      <h3>Add New Notes</h3>\n      <EditForm\n        classID={classID}\n        setclass={setclassID}\n        subject={subject}\n        setsubject={setsubject}\n        topic={topic}\n        settopic={settopic}\n        file={file}\n        handleAdd={handleEditNote}\n        handleReset={handleResetNote}\n        loading={loading}\n        isEdit={true}\n        setfile={handleSetFile}\n        notes={notes}\n        setnotes={setnotes}\n      />\n    </div>\n  );\n}\n\nexport default EditNote;\n"],"sourceRoot":""}