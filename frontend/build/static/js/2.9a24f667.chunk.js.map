{"version":3,"sources":["../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/compact.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepMerge.ts","../../src/utils/deepEqual.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/logic/getFieldsValues.ts","../../src/logic/isErrorStateChanged.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/isWeb.ts","../../src/utils/cloneObject.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/logic/attachEventListeners.ts","../../src/utils/onDomRemove.ts","../../src/useFormContext.tsx"],"names":["value","HTMLElement","EVENTS","BLUR","CHANGE","INPUT","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","isObjectType","isNullOrUndefined","Array","isArray","Date","test","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","reduce","isUndefined","fields","fieldErrors","get","field","ref","focus","options","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","previous","option","checked","selected","map","element","type","defaultResult","validResult","values","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","shouldKeepRawValue","current","disabled","valueAsNumber","valueAsDate","setValueAs","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","getMultipleSelectValue","isCheckBox","getCheckboxValue","NaN","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","Object","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","deepMerge","target","source","isPrimitive","targetValue","sourceValue","deepEqual","object1","object2","isErrorObject","React.isValidElement","keys1","keys2","val1","val2","setDirtyFields","defaultValues","dirtyFields","parentName","shallowFieldsState","shouldUnregister","search","output","isString","startsWith","find","transformToNestObject","errors","error","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","message","getValidateError","isMessage","validateAllFieldCriteria","types","async","required","maxLength","minLength","min","max","pattern","validate","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","getFieldsValue","validateRef","isFunction","validateError","validationResult","validateFunction","entries","getPath","rootPath","paths","property","rootName","push","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","forEach","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","window","document","cloneObject","copy","isWeb","File","includes","constructor","getTime","Set","Map","mode","isOnSubmit","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","formState","setFormState","React.useState","isDirty","isValidating","submitCount","touched","isSubmitting","isSubmitSuccessful","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","state","updateIsValidating","shouldRenderBaseOnError","shouldRender","shouldReRender","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","getNodeParentName","setFieldArrayDirtyFields","isFieldWatched","match","renderWatchedInputs","found","size","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","skipValidation","parentNodeName","currentError","validateResolver","newDefaultValues","removeFieldEventListener","forceDelete","handleChange","fieldRef","removeAllEventListeners","findRemovedFieldAndRemoveListener","updateWatchedValue","watchField","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","assignWatchFields","combinedDefaultValues","registerFieldRef","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","isNameInFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","isSelectInput","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldError","focusOnErrorField","React.useEffect","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","commonProps","setValue","register","refOrRegisterOptions","unregister","prop","control","React.useMemo","watch","reset","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","shouldFocus","FormContext","React.createContext","displayName"],"mappings":"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","file":"static/js/2.9a24f667.chunk.js","sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: string) => /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n  shouldKeepRawValue?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return shouldKeepRawValue\n      ? value\n      : valueAsNumber\n      ? value === ''\n        ? NaN\n        : +value\n      : valueAsDate\n      ? (ref as HTMLInputElement).valueAsDate\n      : setValueAs\n      ? setValueAs(value)\n      : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option = {}, index): void => {\n        if (\n          (isDetached(option.ref) && isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\nimport deepEqual from '../utils/deepEqual';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(value)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(\n      fieldsRef,\n      name,\n      shallowFieldsStateRef,\n      false,\n      true,\n    );\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldName } from '../types';\n\nexport const getPath = <TFieldValues>(\n  rootPath: FieldName<TFieldValues>,\n  values: any,\n  paths: FieldName<TFieldValues>[] = [],\n): FieldName<TFieldValues>[] => {\n  for (const property in values) {\n    const rootName = (rootPath +\n      (isObject(values)\n        ? `.${property}`\n        : `[${property}]`)) as FieldName<TFieldValues>;\n\n    isPrimitive(values[property])\n      ? paths.push(rootName)\n      : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value = undefined;\n\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n","import isPrimitive from './isPrimitive';\nimport isHTMLElement from './isHTMLElement';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n\n  if (\n    isPrimitive(data) ||\n    (isWeb && (data instanceof File || isHTMLElement(data)))\n  ) {\n    return data;\n  }\n\n  if (\n    !['Set', 'Map', 'Object', 'Date', 'Array'].includes(\n      (data as Object).constructor?.name,\n    )\n  ) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key)));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key]);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  RegisterOptions,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  ResetFieldArrayFunctionRef,\n  UseWatchRenderFunctions,\n  RecordInternalNameSet,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const fieldArrayValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<RecordInternalNameSet<TFieldValues>>(\n    {},\n  );\n  const useWatchRenderFunctionsRef = React.useRef<UseWatchRenderFunctions>({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    ResetFieldArrayFunctionRef<TFieldValues>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isValidating: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) => {\n      if (!isUnMount.current) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        setFormState(formStateRef.current);\n      }\n    },\n    [],\n  );\n\n  const updateIsValidating = () =>\n    readFormStateRef.current.isValidating &&\n    updateFormState({\n      isValidating: true,\n    });\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        readFormStateRef.current.isValidating\n      ) {\n        updateFormState({\n          ...state,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n          isValidating: false,\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (name: FieldName<TFieldValues>, rawValue: SetFieldValue<TFieldValues>) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(formValues, defaultValuesRef.current);\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touched'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && updateFormState(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          isValidating: false,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      updateIsValidating();\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState({\n          isValidating: false,\n        });\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !shouldUnregister &&\n        !isPrimitive(value) &&\n        set(\n          shallowFieldsStateRef.current,\n          name,\n          Array.isArray(value) ? [...value] : { ...value },\n        );\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          const parentName = getNodeParentName(name) || name;\n          set(fieldArrayDefaultValuesRef.current, name, value);\n\n          resetFieldArrayFunctionRef.current[parentName]({\n            [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<TFieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n  ): boolean => {\n    let found = true;\n\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender =\n            !isEmptyObject(state) ||\n            (!isBlurEvent && isFieldWatched(name as FieldName<TFieldValues>));\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            !isBlurEvent && renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          updateIsValidating();\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          !isBlurEvent && renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const newDefaultValues = isEmptyObject(fieldsRef.current)\n        ? defaultValuesRef.current\n        : {};\n\n      const { errors } =\n        (await resolverRef.current!(\n          {\n            ...newDefaultValues,\n            ...getValues(),\n            ...values,\n          },\n          contextRef.current,\n          isValidateAllFieldCriteria,\n        )) || {};\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) => {\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      );\n\n      if (shouldUnregister) {\n        unset(validFieldsRef.current, field.ref.name);\n        unset(fieldsWithValidationRef.current, field.ref.name);\n      }\n    },\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            isDirty: isFormDirty(),\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        const parentNodeName = getNodeParentName(fieldNames) || fieldNames;\n\n        if (fieldArrayNamesRef.current.has(parentNodeName)) {\n          fieldValues = {\n            ...fieldArrayValuesRef.current,\n            ...fieldValues,\n          };\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(get(defaultValuesRef.current, fieldNames))\n            ? defaultValue\n            : get(defaultValuesRef.current, fieldNames),\n          true,\n        );\n      }\n\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name?: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[] | undefined,\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    options: RegisterOptions | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...options,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...options,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...options,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name as FieldName<TFieldValues>, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (shouldUnregister && !(isFieldArray && isEmptyDefaultValue)) {\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    options?: RegisterOptions,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrRegisterOptions?:\n      | FieldName<TFieldValues>\n      | RegisterOptions\n      | (TFieldElement & Ref)\n      | null,\n    options?: RegisterOptions,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({ name: refOrRegisterOptions }, options);\n      } else if (\n        isObject(refOrRegisterOptions) &&\n        'name' in refOrRegisterOptions\n      ) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const { name } = field.ref;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: DefaultValues<TFieldValues>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values || defaultValuesRef.current);\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      observerRef.current && observerRef.current.disconnect();\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n"],"sourceRoot":""}